#define PIN_LED  9
#define PIN_TRIG 12   
#define PIN_ECHO 13

// configurable parameters
#define SND_VEL 346.0     
#define INTERVAL 25       
#define PULSE_DURATION 10 
#define _DIST_MIN 100.0   
#define _DIST_MAX 300.0  

#define TIMEOUT ((INTERVAL / 2) * 1000.0) 
#define SCALE (0.001 * 0.5 * SND_VEL)     

unsigned long last_sampling_time;   

void setup() {
  // initialize GPIO pins
  pinMode(PIN_LED, OUTPUT);    
  pinMode(PIN_TRIG, OUTPUT);   
  pinMode(PIN_ECHO, INPUT);    
  digitalWrite(PIN_TRIG, LOW); 
  
  Serial.begin(57600);

  last_sampling_time = millis();
}

void loop() { 
  float distance;

  if (millis() < (last_sampling_time + INTERVAL))
    return;

  distance = USS_measure(PIN_TRIG, PIN_ECHO); // read distance (mm)

  int duty;
  if (distance == 0.0f) {
    duty = 255;
  } else if (distance <= _DIST_MIN || distance >= _DIST_MAX) {
    duty = 255;  // 범위 바깥: 최소 밝기(꺼짐)
  } else {
    float delta = fabsf(distance - 200.0f);        
    float val   = 255.0f * (delta / 100.0f);       
    duty = (int)(val + 0.5f);                     
    if (duty < 0) duty = 0; if (duty > 255) duty = 255;
  }
  analogWrite(PIN_LED, duty);  // PWM 출력 (액티브-로우: 0이 가장 밝음)

  // output the distance to the serial port
  Serial.print("Min:");        Serial.print(_DIST_MIN);
  Serial.print(",distance:");  Serial.print(distance);
  Serial.print(",Max:");       Serial.print(_DIST_MAX);
  Serial.print(",duty:");      Serial.print(duty);
  Serial.println("");
  
 
  last_sampling_time += INTERVAL;
}

float USS_measure(int TRIG, int ECHO)
{
  digitalWrite(TRIG, HIGH);
  delayMicroseconds(PULSE_DURATION);
  digitalWrite(TRIG, LOW);
  
  return pulseIn(ECHO, HIGH, TIMEOUT) * SCALE; 
}
